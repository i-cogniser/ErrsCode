import datetime
import json
import platform
import aiohttp
import aiofiles
import asyncio
from aiocsv import AsyncWriter
import math
import random
from m_headers import headers
# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ–±—â–∏–µ:

current_time = datetime.datetime.now().strftime("%d.%m.%Y %H-%M")


async def get_products_magnit():
    # –°–æ–∑–¥–∞–¥–∏–º —Å–µ—Å—Å–∏—é:
    async with aiohttp.ClientSession() as session:
        response = await session.get('https://web-gateway.middle-api.magnit.ru/v1/cities', headers=headers)
        rest = await response.json()

        """–ü–æ–ª—É—á–∏–º —Å–ø–∏—Å–æ–∫ –ì–æ—Ä–æ–¥–æ–≤ –∏ –≤—ã–±–µ—Ä–µ–º –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö"""
        list_city = []
        for item in rest['cities']:
            city = item['city']
        # –°–æ–∑–¥–∞–¥–∏–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:
        list_city.append(city)
        for lst in enumerate(sorted(list_city), 1):
            cities = f"{lst[0]}. {lst[1]}"
        print(cities)
        while True:
            choice_city = input("[ENTER] –£–∫–∞–∂–∏—Ç–µ –ì–æ—Ä–æ–¥ (–ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ):\n")
            if choice_city in [item['city'] for item in rest['cities']]:
                for town in rest['cities']:
                    if choice_city == town['city']:
                        longitude = town['longitude']
                        latitude = town['latitude']

                        # –°–¥–µ–ª–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–∞—É–∑—É –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏:
                        await asyncio.sleep(random.randrange(1, 4))

                        """–ü–æ–ª—É—á–∏–º —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ì–æ—Ä–æ–¥–∞ –∏ –≤—ã–±–µ—Ä–µ–º –æ–¥–∏–Ω –∏–∑–Ω–∏—Ö"""
                        params = {
                            'Longitude': f"{longitude}",  # –î–æ–ª–≥–æ—Ç–∞ –∏ —à–∏—Ä–æ—Ç–∞ –ì–æ—Ä–æ–¥–∞
                            'Latitude': f"{latitude}",
                            'StoreType': 'MM',  # MM: –ú–∞–≥–Ω–∏—Ç —É –¥–æ–º–∞
                            'Radius': '20',
                            'Limit': '500',
                        }

                        response = await session.get(
                            'https://web-gateway.middle-api.magnit.ru / v1 / geolocation / store', params=params,
                            headers=headers)
                        rest = await response.json()

                        while True:
                            store_search = input(
                                "[SEARCH] –£–∫–∞–∂–∏—Ç–µ —É–ª–∏—Ü—É –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ (–º–æ–∂–Ω–æ –±–µ–∑ –æ–∫–æ–Ω—á–∞–Ω–∏—è):\n ").lower()
                            list_stores = []
                            list_compare = [sel['address'].lower() for sel in rest['stores']]
                            if any(store_search in item for item in list_compare):
                                for shop in rest['stores']:
                                    address = shop['address'].replace(f"{choice_city} –≥, ", '').lower().strip()
                                    store_id = shop['id']
                                    work = f"{shop['openingHours']} - {shop['closingHours']}"

                                    # –°–æ–∑–¥–∞–¥–∏–º —Å–ø–∏—Å–æ–∫ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–≤ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º ID –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:
                                    if store_search in address:
                                        list_stores.append(
                                            f"{address} [{work}] ID: {store_id}"
                                        )
                                break
                            else:
                                print("[ERRORüî•] –¢–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ—Ç –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö —É–ª–∏—Ü –º–∞–≥–∞–∑–∏–Ω–æ–≤!")

                        # –°–¥–µ–ª–∞–µ–º –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:
                        for lst in enumerate(sorted(list_stores), 1):
                            stores = f"{lst[0]}. {lst[1]}"
                            print(stores)

                        """–ó–∞–≥—Ä—É–∑–∏–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ –∞–∫—Ü–∏—è–º, –≥–¥–µ –µ—Å—Ç—å —Ü–µ–Ω—ã, –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ
                        –º–∞–≥–∞–∑–∏–Ω–∞"""
                        while True:
                            user_enter_id = input("[CHOOSE] –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä ID –º–∞–≥–∞–∑–∏–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ:\n ")
                            if any(user_enter_id in item for item in list_stores):
                                choice_store_id = user_enter_id
                                break
                            else:
                                print("[ERRORüî•] –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID!")

                        # –í–µ—Ä–Ω—ë–º –º–∞–≥–∞–∑–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
                        for part in list_stores:
                            if user_enter_id in part:
                                user_store = part[0:part.find(' ID')]
                        print(f"–ú–∞–≥–∞–∑–∏–Ω: {user_store}")
                        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º –∫–æ–ª-–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∞–∫—Ü–∏—è–º:

                        params = {
                            'offset': '0',  # 0 - –ø–µ—Ä–≤—ã–µ 36 —Ç–æ–≤–∞—Ä–æ–≤ (1 —Å—Ç—Ä)
                            'limit': '36',
                            'storeId': f"{choice_store_id}",
                            'sortBy': 'priority',
                            'order': 'desc',
                            'adult': 'true',
                        }

                        response = await session.get('https://web-gateway.middle-api.magnit.ru / v1 / promotion',
                                                     params=params,
                                                     headers=headers)
                        rest = await response.json()
                        card_count = rest['total']
                        pages_count = math.ceil(card_count / len([x['categoryName'] for x in rest['data']]))
                        print(f"Total Pages: {pages_count}")

                        # –°–¥–µ–ª–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–∞—É–∑—É –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏:
                        await asyncio.sleep(random.randrange(1, 4))

                        # –î–∞–ª–µ–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ:
                        count = 1
                        title_csv = [
                            ['name', 'category', 'price', 'end_promotion', 'image', 'link']
                        ]
                        list_products = []
                        for page in range(0, 108, 36):  # range(0, card_count, 36)
                            params = {
                                'offset': f"{page}",
                                'limit': '36',
                                'storeId': f"{choice_store_id}",
                                'sortBy': 'priority',
                                'order': 'desc',
                                'adult': 'true',
                            }

                        response = await session.get('https://web-gateway.middle-api.magnit.ru / v1 / promotions',
                                                     params=params,
                                                     headers=headers)
                        rest = await response.json()

                        for item in rest['data']:
                            # –ï—Å–ª–∏ –∫–ª—é—á Price –µ—Å—Ç—å –≤ –ø—Ä–æ–¥—É–∫—Ç–µ, —Ç–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –Ω–µ–≥–æ –¥–∞–Ω–Ω—ã–µ:
                            if 'price' in item:
                                name = item['name']
                                category = item['categoryName']
                                price = str(float(item['price']) / 100).replace('.', ',')
                                # –î–∞—Ç—É –ø–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ –¥—Ä—É–≥—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: d.m.y
                                end_date = datetime.datetime.strptime(item['endDate'], '%Y-%m-% d ').strftime(
                                    ' % d. % m. % y ')
                                image = item['imageUrl']
                                # –ò–Ω–æ–≥–¥–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç productCode –ø—Ä–æ–¥—É–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—Ö–æ–¥–∏—Ç –≤—Å–æ—Å—Ç–∞–≤ —Å—Å—ã–ª–∫–∏:
                                try:
                                    link = 'https://magnit.ru/promo/' + item['productCode']
                                except KeyError:
                                    link = "[ERROR] –ù–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É!"
                                list_products.append({
                                    'name': name,
                                    'category': category,
                                    'price': price,
                                    'end_promotion': end_date,
                                    'image': image,
                                    'link': link
                                })
                                data_csv = [name, category, price, end_date, image, link]
                                title_csv.append(data_csv)
                        print(f"[+] Page {count} of {pages_count}")
                        # –°–¥–µ–ª–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–∞—É–∑—É –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏:
                        await asyncio.sleep(random.randrange(1, 4))
                        count += 1
                        async with aiofiles.open(f"data-1/MagnitHome_{choice_city}.json", 'w',
                                                 encoding='utf-8') as file:
                            await file.write(json.dumps(list_products, indent=4, ensure_ascii=False))
                        async with aiofiles.open(f"data-1/MagnitHome_{choice_city}_{current_time}.csv", 'w',
                                                 newline='') as file:
                            writer = AsyncWriter(file, delimiter=";")
                            await writer.writerows(title_csv)

            break
        else:
            print("[ERRORüî•] –í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã!")


async def main():
    await get_products_magnit()


if __name__ == '__main__':
    if platform.system() == 'Windows':
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
asyncio.run(main())